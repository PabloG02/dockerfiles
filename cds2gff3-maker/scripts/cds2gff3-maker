#!/bin/bash

CDS2GFF3_KEEP_TEMPORARY_FILES=${CDS2GFF3_KEEP_TEMPORARY_FILES:-no}
VERSION_PEGI3S_UTILITIES=${VERSION_PEGI3S_UTILITIES:-latest}

set -o errexit

display_usage() {
	echo -e "This script generates a GFF3 file from a FASTA file containing CDS and a genome FASTA file."
	echo -e "\nUsage:"
	echo -e "\t`basename $0` <input_cds> <input_genome> <output_gff3> [--give-all]"
	echo -e "\nWhere:"
	echo -e "\t--give-all: optional flag to force obtaining all annotations"
}

if [[ $1 == "--help" ]]; then
	display_usage
	exit 0
fi

if [ ! $# -eq 3 ] && [ ! $# -eq 4 ]; then
	tput setaf 1
	echo -e "Error. This script requires three or four arguments.\n"
	tput sgr0
	display_usage
	exit 1
fi

CDS=$1
GENOME=$2
OUTPUT=$3
GIVE_ALL="no"
if [ $# -eq 4 ]; then
	if [ "$4" == "--give-all" ]; then
		GIVE_ALL="yes"
	else
		echo -e "Warning. Ignoring unknown option $4"
	fi
fi

TMP_DIR=$(mktemp -d /tmp/cds2gff3-maker.XXXXXX)

echo "##gff-version 3" > ${TMP_DIR}/gff3
cp ${GENOME} ${TMP_DIR}/genome
cp ${CDS} ${TMP_DIR}/cds

docker run --rm \
	-v /var/run/docker.sock:/var/run/docker.sock \
	-v ${TMP_DIR}:/data pegi3s/utilities:${VERSION_PEGI3S_UTILITIES} \
		fasta_remove_line_breaks /data/cds -o=/data/cds_without_line_breaks

while read header; do
	read seq
	rm -f ${TMP_DIR}/input
	echo "$header" > ${TMP_DIR}/input
	echo $seq >> ${TMP_DIR}/input
	gene_name=$(head -1 ${TMP_DIR}/input | sed 's/>//g' | cut -f1 -d' ')

	echo "Running cds2gff3-maker for" $gene_name
	cds2gff3 ${TMP_DIR} ${GIVE_ALL}
done < ${TMP_DIR}/cds_without_line_breaks

mv ${TMP_DIR}/gff3 ${OUTPUT}

if [ "${CDS2GFF3_KEEP_TEMPORARY_FILES}" == "no" ]; then
	rm -rf ${TMP_DIR}
fi
