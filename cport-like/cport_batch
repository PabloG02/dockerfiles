#!/bin/bash

#### supported methods are: scriber ispred4 sppider cons_ppisp meta_ppisp predictprotein psiver csm_potential scannet whiscy predus2 ####

. /data/config

prefix=""

for single_method in $method; do
	uppercase_method=$(echo "$single_method" | tr '[:lower:]' '[:upper:]')
	wait_interval="${single_method}wi" 
	if [ -v "$wait_interval" ]; then
		var="${uppercase_method}_WAIT_INTERVAL"
    	env1=""$var"="${!wait_interval}""
	fi
	num_retries="${single_method}nr"
	if [ -v "$num_retries" ]; then
		var="${uppercase_method}_NUM_RETRIES" 
    	env2=""$var"="${!num_retries}""
	fi
	prefix="$prefix $env1 $env2"
done

ls /data/$input_dir > /output/list
while read name; do

	grep "^ATOM" /data/$input_dir/$name > /output/tmp0.pdb
	protein_size=$(tail -1 /output/tmp0.pdb | cut -c 23-26 | sed 's/ //g')
	
	for single_method in $method; do
		
		#Needs extension
		command_with_env="${prefix} cport /output/tmp0.pdb $chain --pred $single_method"
		eval $command_with_env 

		if [ $? -ne 0 ]; then
			echo "The program ended with an error."
			continue
		else
			cp /output/predictors_tmp0.csv /output/"${name%.*}".$single_method.csv 
			touch /output/$name.result && cp /output/predictors_tmp0.csv /output/$name.result && rm /output/predictors_tmp0.csv
		fi

		position=1
		while [ $position -le $protein_size ]; do
			sed -i "s/$/\,\-/g" /output/$name.result
			position=$(( $position +1 ))
		done
		ct=$(( $protein_size + 1 ))
		cut -f1-$ct -d',' /output/$name.result > /output/$name.result_a && cat /output/$name.result_a > /output/$name.result && rm /output/$name.result_a
		
		position=1
		while [ $position -le $protein_size ]; do
			echo $position >> /output/position
			position=$(( $position +1 ))
		done
		
		header=$(cat /output/position | tr '\n' ',')
		echo "Position,"$header >> /output/$name.final_result_position
		
		while read current_line; do
			read next_line
			
			b=1
			a=$(echo $current_line | cut -f2 -d',')
			while [ $a -gt $b ]; do
				c=$(echo $c"-,")
				d=$(echo $next_line | cut -f2- -d',')
				e=$(echo $next_line | cut -f1 -d',')
				b=$(( b + 1 ))
			done 
			
			if [ $a -ne "1" ]; then #no equals
				modified_line=$(echo $e","$c$d)
				next_line=$modified_line
			fi
			a=1; b=1; c=""; d=""; e=""
			
			echo $next_line >> /output/$name.final_result
		done < /output/$name.result

		
		cut -f1-$ct -d',' /output/$name.final_result > /output/$name.final_result_a && 
			cat /output/$name.final_result_position /output/$name.final_result_a > /output/$name.final_result.csv && 
			rm /output/$name.final_result_position /output/$name.final_result_a /output/$name.final_result
		
		f=$(cat /output/$name.final_result.csv | wc -l)
		#transpose file
		sed 's/\,/ /g' /output/$name.final_result.csv | awk '
		{ 
			for (i=1; i<=NF; i++)  {
				a[NR,i] = $i
			}
		}
		NF>p { p = NF }
		END {    
			for(j=1; j<=p; j++) {
				str=a[1,j]
				for(i=2; i<=NR; i++){
					str=str" "a[i,j];
				}
				print str
			}
		}' >  /output/"${name%.*}".$single_method.result.csv
		
		rm /output/$name.final_result.csv
	done
	rm /output/$name.result
	rm /output/position
	rm /output/tmp0.pdb
done < /output/list
rm /output/list











